swagger: "2.0"
info:
  description: "This is a simple Point of Sysuem."
  version: "1.0.0"
  title: "Cake POS"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "randilu@cakepos.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1"
tags:
- name: "Item"
  description: "Operations on Inventory Items"
- name: "Order"
  description: "Access to Orders"
- name: "User"
  description: "Operations on Users"
schemes:
- "https"
- "http"
paths:
  /items:
    get:
      tags:
      - "Item"
      summary: "Get all available items"
      description: "Returns all the items"
      operationId: "getAllItems"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Item"
        404:
          description: "Items not found"
        500:
          description: "Internal server error" 
    post:
      tags:
      - "Item"
      summary: "Add a new item to the store"
      description: ""
      operationId: "additem"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        201:
          description: "Created"
        404:
          description: "Item not found"
        500:
          description: "Internal server error"
  /items/{itemId}:
    get:
      tags:
      - "Item"
      summary: "Find Item by ID"
      description: "Returns a single item"
      operationId: "getItemById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of order that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Item"
        404:
          description: "Items not found"
        500:
          description: "Internal server error"  
    put:
      tags:
      - "Item"
      summary: "Updates an existing item in the store"
      description: ""
      operationId: "updateItem"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Item object to update"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        200:
          description: "Success"
        404:
          description: "Item not found"
        500:
          description: "Internal server error"
    delete:
      tags:
      - "Item"
      summary: "Deletes an item from store"
      description: ""
      operationId: "deleteItem"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "itemId"
        in: "path"
        description: "Item id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        404:
          description: "Item not found"
        500:
          description: "Internal server error"
  /items/{itemId}/uploadImage:
    post:
      tags:
      - "Item"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "string"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "success"
        500:
          description: "Internal server error"
          
          
  /orders:
    get:
      tags:
      - "Order"
      summary: "Get all purchase orders"
      description: "Returns all the order"
      operationId: "getAllOrders"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "Items not found"
        500:
          description: "Internal server error" 
    post:
      tags:
      - "Order"
      summary: "Place an order"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order details"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
        500:
          description: "Internal server error"
  /orders/{orderId}:
    get:
      tags:
      - "Order"
      summary: "Find purchase order by ID"
      description: ""
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
        500:
          description: "Internal server error" 
    put:
      tags:
      - "Order"
      summary: "Updates an existing Order by Id"
      description: ""
      operationId: "updateOrder"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Order object to update"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "Success"
        404:
          description: "Order not found"
        500:
          description: "Internal server error"        
    delete:
      tags:
      - "Order"
      summary: "Delete purchase order by ID"
      description: ""
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
        500:
          description: "Internal server error" 
          
  /users:
    get:
      tags:
      - "User"
      summary: "Get all users"
      description: "Returns all the users in the system"
      operationId: "getAllUsers"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Items not found"
        500:
          description: "Internal server error" 
    post:
      tags:
      - "User"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"
  /user/login:
    get:
      tags:
      - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid email/password supplied"
  /user/logout:
    get:
      tags:
      - "User"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "User"
      summary: "Get user by user email"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The name that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid email supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "User"
      summary: "Update user"
      description: ""
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "User"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid email supplied"
        404:
          description: "User not found"
definitions:
  Item:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      price:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
  Order:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      products:
        type: "array"
        items:
           $ref: "#/definitions/OrderItem"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "pending"
        - "served"
      complete:
        type: "boolean"
        default: false
  OrderItem:
    type: "object"
    properties:
      id:
        type: "string"
      item_id:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
   